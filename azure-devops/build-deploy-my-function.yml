##########################################################################################################
# Build a .Net Azure Function and deploy non-PR builds of the [main] branch
##########################################################################################################

# Automatically trigger a build for a pull request (PR) going INTO these branches
pr:
  branches:
    include:
      - main

# Trigger a new build when there are pushed changes for these branches (this includes creating a branch)
trigger:
  branches:
    include:
      - main

# Build Number
name: $(date:yyyy.M.d)$(rev:.r)

stages:
  - stage: Build
    displayName: Build
    jobs:
      - job: Build
        displayName: Build
        pool:
          vmImage: "ubuntu-latest"
        steps:
          - task: UseDotNet@2
            displayName: "Use .NET: [SDK 3.1]"
            inputs:
              packageType: "sdk"
              version: "3.1.x"

          - task: DotNetCoreCLI@2
            displayName: ".Net Core CLI: [build]"
            inputs:
              command: "build"
              projects: "$(Build.SourcesDirectory)/src/**/*.csproj"
              arguments: --output $(Build.SourcesDirectory)/publish_output --configuration Release

          - task: DotNetCoreCLI@2
            displayName: ".Net Core CLI: [test]"
            inputs:
              command: "test"
              arguments: '--no-restore --collect:"XPlat Code Coverage"'
              testRunTitle: "Unit Tests"
              workingDirectory: "$(Build.SourcesDirectory)/src"

          # Test results are automatically published but we'll need to expliticlty publish the code coverage
          - task: PublishCodeCoverageResults@1
            displayName: "Publish Code Coverage Results: Cobertura Report"
            inputs:
              codeCoverageTool: "Cobertura"
              summaryFileLocation: "$(Agent.TempDirectory)/**/coverage.cobertura.xml"
              failIfCoverageEmpty: true

          - task: ArchiveFiles@2
            displayName: "Archive Files: [$(Build.SourcesDirectory)/publish_output]"
            inputs:
              rootFolderOrFile: "$(Build.SourcesDirectory)/publish_output"
              includeRootFolder: false
              archiveType: zip
              archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).zip
              replaceExistingArchive: true

          - task: PublishBuildArtifacts@1
            displayName: "Publish Build Artifacts: [$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).zip]"
            inputs:
              PathtoPublish: "$(Build.ArtifactStagingDirectory)/$(Build.BuildNumber).zip"
              ArtifactName: "drop"
              publishLocation: "Container"
